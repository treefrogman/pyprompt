#!/usr/bin/python
# Monty Python's Flying Encoding: utf-8

import os
import sys
import getpass
from datetime import datetime



def batterylevel():
	profile = os.popen( "ioreg -r -c AppleSmartBattery", 'r' ).read()

	for line in profile.split( "\n" ):
		if 'CurrentCapacity' in line:
			curline = line
		elif 'MaxCapacity' in line:
			maxline = line
		elif 'ExternalChargeCapable' in line:
			chgline = line

	chg = { "Yes": "⚡", "No": "%" }[ chgline.split( " " )[ -1 ] ]
	cur = int( curline.split( " " )[ -1 ] )
	max = int( maxline.split( " " )[ -1 ] )

	return chg + str( 100 * cur / max )



def emojiclock():
	time = datetime.now()

	times = [ "🕛", "🕧", "🕐", "🕜", "🕑", "🕝", "🕒", "🕞", "🕓", "🕟", "🕔", "🕠", "🕕", "🕡", "🕖", "🕢", "🕗", "🕣", "🕘", "🕤", "🕙", "🕥", "🕚", "🕦" ]

	return times[ ( time.hour * 2 + ( time.minute + 15 ) / 30 ) % 24 ]



rows, columns = map( lambda s: int( s ), os.popen('stty size', 'r').read().split() )

def s( id ):
	internals = {
#		'topLeft': '\033[0;0H',
#		'bottomLeft': '\033[100;0H',
#		'clearLine': '\033[K',
#		'upOne': '\033[1A',
#		'inField': '\033[' + str( int( rows ) - 1 ) + ';3H',
#		'outputPosition': '\033[' + str( int( rows ) ) + ';1H',
#		'spaceLine': ' ' * ( int( columns ) - 1 ),
#		'horizontalRule': '━' * ( int( columns ) - 6 ),
		'invert': '\033[7m',
		'bold': '\033[1m',
		'reset': '\033[0m'
	}
	if id > 9:
		return internals[ id ]
	return '[' + internals[ id ] + ']'

v = {
	'cwd': "/" if os.path.abspath( os.getcwd() ) == "/" else
		( "~" if (
			os.path.abspath( os.getcwd() ) == os.environ[ 'HOME' ]
		) else os.path.split( os.getcwd() )[ 1 ] ),
	'user': getpass.getuser()
}



def end_prompt():
	#print s( 'outputPosition' )
	sys.stdout.write( '\033[0m\033[K' )#s( 'reset' ) )
	#print( '\033[0m' )#s( 'reset' ) )

def begin_prompt():
	#StatusBar = s( 'invert' ) + " " + " ┃ ".join( [
	StatusBar = " ┃ ".join( [
		batterylevel(),
		datetime.today().strftime( "⌚ %y%m%d ┃ ⌛ %H%M%S" ),
		"⍝ " + v[ "user" ],
		"⌂ " + v[ "cwd" ]
	] ).decode( 'utf-8' ).center( columns, " " )
	StatusBar = StatusBar.encode( 'utf-8' ).replace( "⌚", "📅" ).replace( "⌛", emojiclock() ).replace( "⍝", "👤" ).replace( "⌂", "📂" )
	print StatusBar #, s( 'bold' )
	#print len( StatusBar )

if "-e" in sys.argv:
	end_prompt()
else:
	begin_prompt()
